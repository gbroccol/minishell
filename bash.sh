###############################################################################################
echo 'Hello World!'
echo jbkjnk
echo abc def
echo abc             def
     echo    890     345
ECHO 1223
echo "123" "456"
echo "$"
echo "$|$"
echo -n 55                   
echo -n ''
echo -n 'jbbjhhd'
echo 123 ;
echo 123 ; echo 456
echo "42 ;" ; echo "24 24"
echo -n -n -n 23
#                                  ЭКРАНИРОВАНИЕ
echo "\$ \#     |$/\n"             # работает не всегда правильно проверить парсинг
echo "\$|$/"
echo "Это #не комментарий"
echo Это # Вот комментарий.
echo Это \# не комментарий
echo 567t6 ; 890 -n mk ; echo 123
echo 567t6 ; 890
echo 'Это # не комментарий
'
echo 123 ; echo Это \# не комментарий"

"
"
"
# пустая строка
echo '$PWD'



#                                       НАСТЯ
echo $PWD
echo "$PWD"

echo ${PATH#*:} #Специальная переменная
echo $(( 2#101011 )) #Преобразование системы счисления в арифметической подстановке.
echo -n 5 | cat -e
echo "dd" | cat -e
echo '||' | cat -e
echo 42 > 1 ; echo 22 >> 1 ; cat -e  1
echo < 1
grep < 1
grep 2 < 1
echo 42 23 | grep 4 | cat -e
grep 4 < 1 | cat -e
ls 1111111 | grep 111 | cat -e
echo -n 5 | cat -e

# >, >> - перенаправление стандартного вывода программы в файл
# < - перенаправление стандартного ввода программы из файла
# |- перенаправление стандартного вывода программы на стандартный ввод другой программы
# ; Разделитель команд в строке

# ;; Разделитель альтернатив в операторе case
# case "$VARiable" in
# abc) echo "$VARiable = abc" ;;
# xyz) echo "$VARiable = xyz" ;;
# esac

# . Аналог команды source (#include в С++). Выполняет скрипт в текущем интерпретаторе.
# . myconf

# ".." Двойные кавычки, отменяют действие спецсимволов кроме $ `..` и \
# '...' Апострофы, отменяют действие всех спецсимволов в том числе и \, по этому нельзя включить апостроф в строку ограниченную апострофами

# : Нулевая команда, всегда возвращает нулевой код ответа. В сочетании с перенаправлением ">" создает файл, или обнуляет существующий. В сочетании с перенаправлением ">>" создает файл, или изменяет время модификации существующего
# :> data.xxx # File “data.xxx” now empty.
# (можно и без двоеточия)

# Шаблоны в именах файлов. Если подходящие имена находятся, то они подставляются в командную строку как отдельные аргументы (возможно с пробелами внутри). Если имена не находятся, то шаблон остается как есть.

# * Шаблон заменяющий любую последовательность символов
# ? Шаблон заменяющий ровно один символ
# [xyz] Шаблон заменяющий один из перечисленных символов
# {xxx,yyy,zzz,...} Подстановка одного из вариантов в шаблон. В скобках не должно быть неэкранированных пробелов
# grep Linux file*.{txt,htm*} # Ищет слово “Linux” в файлах вида “fileA.txt”, “file2.txt”, “fileR.html”, “file-87.htm”, etc.

# $ Подстановка значения переменной, арифметического выражения или стандартного вывода программы. Если значение содержит пробелы, то при подстановке оно разбивается на отдельные аргументы.
# $A содержимое переменной A
# $$ PID процесса
# $? Код возврата из последней выполненной программы или функции, а также код возврата самого скрипта
# $((2*2)) подстановка результата вычисления арифметического выражения
# $(cmd) подстановка стандартного вывода программы
# `...` тоже, что и $(...) – подстановка стандартного вывода программы

# Пример: A=EE; echo $A $(echo QQ) $((7+5))
# Результат: EE QQ 12
# Ошибка: $A=ZZ
# Результат: bash: EE=ZZ: command not found

# (...) Группировка команд
# (A=hello; echo $A)
# Для выполнения группы в скобках запускается новый интерпретатор
# A=123
# (A=321)
# echo A = $A # A = 123
# # "A" внутри скобок – локальная переменная.

# (...) Создание массива ( только в bash версии > 2)
# Array=(element1 element2 element3)

# [] Элемент массива ( только в bash версии > 2)
# Array[1]=slot_1
# echo ${Array[1]}

# {1..10} - подстановка чисел от 1 до 10
# {c..n} - подстановка символов от "c" до "n"

# {...} Создание безымянной функции, удобно для перенаправления ввода/вывода нескольких команд в один файл. В отличие от настоящей функции видимости переменных не изменяется.
# PACK=mysql
# {
# echo
# echo "Archive Listing:"
# rpm -qpl ${PACK} # Список фалов в пакете rpm
# echo
# rpm -i --test ${PACK} # Проверка, установлен ли пакет.
# } > "${PACK}.txt" #И весь вывод в один файл.

# [...] Встроенная функция test для вычисления логических выражений

# ((...)) Арифметическая подстановка, вычисляет арифметическое выражение в стиле языка Си внутри скобок

# & - запуск программы в фоновом режиме
# bash$ sleep 10 &
# [1] 850
# [1]+ Done sleep 10



###############################################################################################
cd minishell
cd libft
cd ..
cd .
cd ~
cd Desktop


###############################################################################################
pwd
 
###############################################################################################
export

ex $FINAL=5
env

ex $FINAL=BASH
env

FINAL=SUN
export FINAL
env

final=sun
export final
env

###############################################################################################
unset USER42
unset MAIL42

###############################################################################################
env

###############################################################################################
exit
exit 23

###############################################################################################
/bin/ls
/bin/echo 12
ls -la
/bin/ls
echo $?
/bin/ls ffffff
echo $?
/bin/ls ; echo -n 42;echo 42

cat

unset PATH
ls
export PATH=/bin
